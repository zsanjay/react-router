{"ast":null,"code":"var _jsxFileName = \"/Users/sanjay/Documents/Sanjay/React/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\n\n// You can useLoaderData() hook in the element that's assigned to a route AND \n// in all components that might be used inside that element. \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 23\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // ...\n    // throw new Response(JSON.stringify({ message : 'Could not fetch events.'}), {\n    //   status : 500\n    // });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["/Users/sanjay/Documents/Sanjay/React/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData , json , defer , Await  } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\n\n// You can useLoaderData() hook in the element that's assigned to a route AND \n// in all components that might be used inside that element. \n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n  <Suspense fallback={<p style={{ textAlign: 'center'}}>Loading....</p>}>\n  <Await resolve={events}>\n    {(loadedEvents) => <EventsList events={loadedEvents}/>}\n  </Await>\n  </Suspense>\n  );\n}\n\nexport default EventsPage;\n\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // ...\n    // throw new Response(JSON.stringify({ message : 'Could not fetch events.'}), {\n    //   status : 500\n    // });\n    throw json({message : 'Could not fetch events.'} , {status : 500});\n  } else {\n    const resData = await response.json();\n    return resData.events;\n}\n}\n\nexport async function loader() {\n  return defer({\n    events : loadEvents()\n  });\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAGC,IAAI,EAAGC,KAAK,EAAGC,KAAK,QAAS,kBAAkB;AACxE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,CAAC,CAAC;EAElC,oBACAO,OAAA,CAACF,QAAQ;IAACM,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACtEP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,YAAY,iBAAKb,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEU;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb;AAACT,EAAA,CAVQD,UAAU;EAAA,QACER,aAAa;AAAA;AAAAqB,EAAA,GADzBb,UAAU;AAYnB,eAAeA,UAAU;AAGzB,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMxB,IAAI,CAAC;MAACyB,OAAO,EAAG;IAAyB,CAAC,EAAG;MAACC,MAAM,EAAG;IAAG,CAAC,CAAC;EACpE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACtB,IAAI,CAAC,CAAC;IACrC,OAAO2B,OAAO,CAAClB,MAAM;EACzB;AACA;AAEA,OAAO,eAAemB,MAAMA,CAAA,EAAG;EAC7B,OAAO3B,KAAK,CAAC;IACXQ,MAAM,EAAGY,UAAU,CAAC;EACtB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}