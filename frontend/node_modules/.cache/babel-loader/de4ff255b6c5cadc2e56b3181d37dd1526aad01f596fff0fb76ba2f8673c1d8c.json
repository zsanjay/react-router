{"ast":null,"code":"var _jsxFileName = \"/Users/sanjay/Documents/Sanjay/React/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\n// You can useLoaderData() hook in the element that's assigned to a route AND \n// in all components that might be used inside that element. \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  console.log(\"useLoaderData \", data);\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventsfdsafds');\n  if (!response.ok) {\n    // ...\n    // throw new Response(JSON.stringify({ message : 'Could not fetch events.'}), {\n    //   status : 500\n    // });\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/sanjay/Documents/Sanjay/React/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData , json  } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\n// You can useLoaderData() hook in the element that's assigned to a route AND \n// in all components that might be used inside that element. \n\nfunction EventsPage() {\n  const data = useLoaderData();\n  const events = data.events;\n  console.log(\"useLoaderData \" , data);\n\n  return <EventsList events={events}/>;\n}\n\nexport default EventsPage;\n\n\nexport async function loader() {\n    const response = await fetch('http://localhost:8080/eventsfdsafds');\n\n    if (!response.ok) {\n      // ...\n      // throw new Response(JSON.stringify({ message : 'Could not fetch events.'}), {\n      //   status : 500\n      // });\n      return json({message : 'Could not fetch events.'} , {status : 500});\n    } else {\n      return response;\n  } \n}"],"mappings":";;AAAA,SAASA,aAAa,EAAGC,IAAI,QAAS,kBAAkB;AACxD,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B,MAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAGH,IAAI,CAAC;EAEpC,oBAAOH,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACtC;AAACR,EAAA,CANQD,UAAU;EAAA,QACJL,aAAa;AAAA;AAAAe,EAAA,GADnBV,UAAU;AAQnB,eAAeA,UAAU;AAGzB,OAAO,eAAeW,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;EAEnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,OAAOlB,IAAI,CAAC;MAACmB,OAAO,EAAG;IAAyB,CAAC,EAAG;MAACC,MAAM,EAAG;IAAG,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACnB;AACF;AAAC,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}